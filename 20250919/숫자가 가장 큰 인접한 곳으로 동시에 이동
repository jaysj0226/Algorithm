
n, m, t = map(int, input().split())

# 1-indexed 보드
a = [[0] * (n + 1)]
for _ in range(n):
    a.append([0] + list(map(int, input().split())))

count = [[0] * (n + 1) for _ in range(n + 1)]
next_count = [[0] * (n + 1) for _ in range(n + 1)]

def in_range(x, y):
    return 1 <= x <= n and 1 <= y <= n

# 인접한 곳들 중 가장 값이 큰 위치를 반환 (상,하,좌,우 우선순)
def get_max_neighbor_pos(curr_x, curr_y):
    dxs, dys = [-1, 1, 0, 0], [0, 0, -1, 1]
    max_num = -1
    max_pos = (curr_x, curr_y) 

    for dx, dy in zip(dxs, dys):
        nx, ny = curr_x + dx, curr_y + dy
        if in_range(nx, ny) and a[nx][ny] > max_num:
            max_num = a[nx][ny]
            max_pos = (nx, ny)
    return max_pos

def move(x, y):
    nx, ny = get_max_neighbor_pos(x, y)
    next_count[nx][ny] += 1

def move_all():
    # 다음 상태 초기화
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            next_count[i][j] = 0

    # 현재 구슬 이동
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if count[i][j] == 1:
                move(i, j)

    # 복사
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            count[i][j] = next_count[i][j]

def remove_duplicate_marbles():
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if count[i][j] >= 2:
                count[i][j] = 0

def simulate():
    move_all()
    remove_duplicate_marbles()

# 초기 구슬 배치
for _ in range(m):
    x, y = map(int, input().split())
    count[x][y] = 1

# t초 시뮬레이션
for _ in range(t):
    simulate()

# 남은 구슬 수
ans = 0
for i in range(1, n + 1):
    for j in range(1, n + 1):
        ans += count[i][j]
print(ans)
